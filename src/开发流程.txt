一.estore简单电子商城(基于servlet/jsp基础)
		(1)用户模块
			1).用户注册(验证码校验 js表单校验 后台数据校验 发送激活邮箱)
			2).用户激活(定时器)
			3).用户登录(记住用户名和密码)
			4).用户注销
		(2)商品模块
			1).商品添加(商品图片的上传---基于文件上传)
			2).商品列表
			3).商品详细信息
			4).购物车 增删查改(Session)
		(3)订单模块
			1).生成订单(事务控制)
			2).订单查询(多表设计 多表查询)
			3).删除订单(事务控制)
		(4)支付模块
			1).在线支付(调用第三方接口)
			2).销售榜单下载(如何将数据库组织成Excel文件下载)
	
--------准备
			技术选型:Servlet+jsp+tomcat+mysql;
			软件架构:javaee的经典三层架构  接口+配置文件+工厂类实现解耦
			
			包结构:
				com.itcast.web
					  .service
					  .dao
					  .domain
					  .utils
					  .factory
					  .exception
					  .test
					  .filter
					  .listener
			导入第三方jar包
				junit  jstl  beanutils mysql驱动 c3p0 dbutils commons-fileupload
				
			数据库表的设计
			
				用户表: id 用户名 密码 昵称 邮箱 角色 激活状态 激活码 注册时间
				商品表: id 商品名称 商品单价 库存数量 商品种类 描述信息 图片地址
				订单表: id 收货地址 下单时间 点单金额 所属用户
				订单项: 订单id 商品id 购买数量
				
				具体设计实现:
					用户表 ---- 订单表
						 一个用户对应有多个订单, 一个订单只能属于一个用户
					 	 所以:用户表 1 <---> 多 订单表
					 	 ---->:在多的那张表中创建持有1的的外键
		
					订单表 ---- 商品表
						 一个订单表中有多个商品,一个商品属于多个订单
						 订单表 多 <---> 多 商品表
						 对于这样一个多对多的关系表,需要建立第三方中间表 
						 订单表 * -- 1 订单项表 1-- * 商品表
				
					
					创建新用户：
						create user estore identified by 'estore';
					授权：
						grant all on estore.* to estore;	
			
			
			create table users (
				id int primary key auto_increment,
				username varchar(40),
				password varchar(100),
				nickname varchar(40),
				email varchar(100),
				role varchar(100) ,
				state int ,
				activecode varchar(100),
				updatetime timestamp
			);

			 create table products(
				id varchar(100) primary key ,
				name varchar(40),
				price double,
				category varchar(40),
				pnum int ,
				imgurl varchar(100),
				description varchar(255)
			);

			create table orders(
				id varchar(100) primary key,
				money double,
				receiverinfo varchar(255),
				paystate int,
				ordertime timestamp,
				user_id int ,
				foreign key(user_id) references users(id)
			);

			create table orderitem(
				order_id varchar(100),
				product_id varchar(100),
				buynum int ,
				primary key(order_id,product_id), #联合主键,两列的值加在一起作为这张表的主键使用
				foreign key(order_id) references orders(id),
				foreign key(product_id) references products(id)
			);
			
			
			javabean
				相关表的类
			软件分层
				通过使用impl实现dao接口,实现工厂类 
			友好错误提示页面
				404.jsp   500.jsp
				 <error-page>
				  	<error-code>404</error-code>
				  	<location>/error/404.jsp</location>
				 </error-page>
			全站乱码解决过滤器
				
			工具类


------------用户模块
			1.用户注册
				index.jsp   	首页,根据用户的登录状态,提示不同的消息,如果未登录(登录,注册) 已经登录(注销)
				regist.jsp  	登录页面,要求用户输入相关的信息,提交(验证码校验,js表单校验)
				RegistServlet 	封装数据,校验数据,调用Service中的方法注册用户,注册成功后提示用户到邮箱中激活,回到主页
				UserService 	注册用户,检查用户名是否已经存在,存在则提示,不存在则添加客户到数据库,发送激活邮件
				UserDao     	根据用户名查找用户,添加用户到数据库				

					(1)index.jsp regist.jsp页面书写(前台js校验数据)
					(2)RegistServlet   
						1)验证码后台校验,封装数据(user用户的信息)后台校验数据
							注意:要设置中文编码过滤
						2)调用service方法,完成注册
			2.用户登录
				主页点击用户登录(记住用户名 30天内自动登录 密码使用MD5加密)
				login.jsp 允许用户输入用户名和密码,密码进行提交完成登录
				LoginServlet 获取用户名和密码,调用service中的方法根据用户名和密码查找用户
				UserService 根据用户名和密码查找用户
				UserDao     根据用户名密码查找用户
				
			3.用户注销
				在主页中点击注销
				LogoutServlet  杀死session回到主页面

------------商品模块
			
			4.商品添加(文件上传-->商品图片的上传)
				主页中提供连接,添加商品
				addProd.jsp   允许用户输入商品的信息,选择商品图片进行提交
				AddProdServlet  上传图片 调用service中的方法增加商品信息
				ProdService   增加商品
				ProdDao       增加商品
			5.商品列表(在jsp页面中展示出来)
				主页中提供链接,商品名称
				ProdListServlet   调用service中的方法,查询所有的商品,存入request域中,在jsp页面中显示
				ProdService       查询所有的商品
				ProdDao           查询所有的方法
				
			6.商品详细信息
				商品列表页面 允许点击图片
				ProdInfoServlet 获取要查询的商品id 根据id查找商品,存入request域中,带到页面显示
				ProdService     根据id查询商品
				ProdDao         根据id查询商品
				ProdInfo.jsp    显示商品的详细信息
				
------------购物车模块
			7.添加商品到购物车
				在商品的详细信息页面中,点击加入购物车
				设置一个HttpSessionListener监听器,在session创建的时候,存入一个Map作为购物车(作为一个监听器,在项目启动运行的时候,session就被创建,项目停止的时候,session就被移除)
				AddCartServlet 根据要加的商品id,查询出商品信息,找到购物车(从session中获取代表购物车的map,map集合中之存入商品的信息和数量),如果购物车中现在没有该商品,数量+1;如果有,在原有的基础上+1;		
				cart.jsp       购物车展示页面,显示购物车中的物品
			8.删除购物车中的物品
				在购物车页面的每条记录后,都有一个 "删除" 按钮
				DelCartServlet 根据id获取商品,从购物车中删除,回到购物车页面
				ClearCartServlet 清空购物车
			9.修改购物车
				修改购物车中商品的数量
				UpdateCartServlet  更新商品数量
------------订单模块
			10.增加订单
				购物车 点击增加订单
				addOrder.jsp  输入订单的基本信息 提交
				AddOrderServlet 将订单的信息存入bean中,调用service中增加订单的方法,提示增加订单成功,清空购物车,回到订单列表页面
				
		注意:    OrderService  增加订单:增加订单记录 增加订单记录项 扣除库存的商品数量    (事物控制)
									(这是3个sql语句完成一件事情,只有两种情况:全部都执行,全部都不执行)
									
			    OrderDao(增加三个方法) 增加订单记录 增加订单项记录
				ProdDao 修改商品库存数量
				
				事务控制:通过编写一个工具类TransactionManager
				  (1)同一个事务中使用相同的Connection对象，我们可以通过传递Connection对象的方式达到共享的目的，传入一个connection参数,达到控制事物的目的,但是这种方法不提倡
				  (2)现在使用另外一种方法:可以引入Java提供的ThreadLocal类，该类保证一个类的实例变量在各个线程中都有一份单独的拷贝，从而不会影响其他线程中的实例变量
										在Thread对象中每一个线程都是一个对象,每一个对象都可以得到一个Connection
				更新丢失问题:(并发的时候,例如当商品的库存数量为 1 的时候,两个用户同时访问购物同一件商品,这个时候应该加入 "锁机制" 悲观锁)
						   悲观锁:主要是加在商品查询的时候,加入 "排它锁"
			
			11.订单页面
				主页 订单列表
				OrderListServlet  调用Service中的方法查询当前客户所有订单信息,存入request域中,带到orderList.jsp页面中做显示
				OrderService 根据用户id查询订单的信息
				OrderDao
				ProdDao
				orderList.jsp 页面显示订单
					
				订单样式:
					
					订单id
					所属用户
					下单时间
					收货地址
					支付状态
					-------------------------------------			
					商品id   商品名称  购买数量 金额
					-------------------------------------
				注:由于缺少相关的信息,所以创建OrderInfo ,创建一个javabean
			
			12.订单删除
				在订单页面中,未支付的订单提供了删除订单的链接
				DelOrderServlet	 	获取要删除的订单的id,调用service中的方法删除订单,删除成功后,3秒提示在回到订单页面
				OrderService 		查找出商品和订单项信息,加回商品库存数量,删除订单项,删除订单
				ProdDao				修改商品数量
				OrderDao			删除订单项 删除订单
------------支付模块
			13.在线支付(调用第三方接口)
				在订单页面,对于未支付的订单 在线支付
				pay.jsp	页面,允许用户选择银行
				PayServlet	组织易宝需要的参数,命令浏览器带着这些参数访问易宝的接口
				CallBackServlet 处理回调的请求			
			
			
			
			
			
			
				
				
				
				
